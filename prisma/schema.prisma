// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  User
  Organization
}

model TestAccount {
  id BigInt @id
  name String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id BigInt @id
  name String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type AccountType
  repositories Repository[]
  users UserAccount[]
}

model Repository {
  id BigInt @id
  name String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pullRequests PullRequest[]
  ownerId BigInt
  owner Account @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  users UserRepository[]
}

model PullRequest {
  id BigInt @id
  number Int
  title String
  state String
  url String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  closedAt DateTime?
  author String
  additions Int
  deletions Int
  changedFiles Int
  repositoryId BigInt
  repository Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  reviews CodeReview[]
}

model CodeReview {
  id BigInt @id
  pullRequestId BigInt
  reviewer String
  status String
  createdAt DateTime @default(now())
  pullRequest PullRequest @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)
}

model CodeReviewComment {
  id BigInt @id
  codeReviewId BigInt
  body String
  path String
  diffHunk String?
  line Int?
  side String
  position Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  resolvedAt DateTime?
  replyToId BigInt?
}

model User {
  id BigInt @id
  name String?
  username String @unique
  email String? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts UserAccount[]
  repositories UserRepository[]
}

model UserAccount {
  id String @id @default(uuid())
  userId BigInt
  accountId BigInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model UserRepository {
  id String @id @default(uuid())
  userId BigInt
  repositoryId BigInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  repository Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
}